import time
import random
map=[["=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","="],["=",".",".",".",".","=",".",".","=",".",".","=","=","=","=","=",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","="],["=",".",".",".",".","=",".",".","=",".",".","#",".",".",".","=",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","="],["=",".",".",".","#",".","#",".","=",".",".","=","=",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","="],["=",".",".",".",".","=",".","#","=",".",".","=","=",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","="],["=",".",".",".",".","=",".",".","#",".",".","=","=",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","="],["=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","="]]
network=[[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0,],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0,],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0]],[[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0]],[[1,1,1,1]]]
oldnetwork=[]
layer1len=len(network[0][0])-1
layer2len=len(network[1][0])-1
layer3len=len(network[2][0])-1
for i in network:
    oldnetwork.append(i)
x=2
y=3
moves=0
oldval=0
newval=0
runcount=0
dif=0
rwu=500 #runs without update
ans=""
def display(x):
    sum=""
    for i in x:
        for n in i:
            sum+=n
        sum+="\n"
    print(sum)
def setpos(x,y,map):
    if map[y][x]=="=":
        for i in map:
            if "O" in i:
                y=map.index(i)
                x=map[map.index(i)][i.index("O")]
    for i in map:
        if "O" in i:
            map[map.index(i)][i.index("O")]="."
            break
    map[y][x]="O"
    return map
while True:
    if runcount==0:
        while True:
            ans=input("skip runs? y/n: ")
            if ans=="y":
                ans=input("how many runs?: ")
                try:
                    runcount=int(ans)
                    skip=False
                    break
                except:
                    pass
            if ans=="n":
                skip=True
                runcount=10
                break
            if ans=="showbestnet":
                skip=True
                network=[]
                for i in oldnetwork:
                    network.append(i)
                runcount=1
                break
    if skip:
        display(map)
        time.sleep(0.1)
    if map[y][x]=="=":
        for i in map:
            if "O" in i:
                y=map.index(i)
                x=i.index("O")
    else:
        map=setpos(x,y,map)
    inputindex=-1
    for i in range(-3,4,1): #startvision
        for j in range(-3,4,1):
            inputindex+=1
            if y+i<0 or x+j<0 or y+i>len(map)-1 or x+j>len(map[y])-1:
                network[0][inputindex][0]=0
                pix=""
            else:
                pix=map[y+i][x+j]
            if pix==".":
                network[0][inputindex][0]=0.5
            elif pix=="=":
                network[0][inputindex][0]=0.1
            elif pix=="#":
                network[0][inputindex][0]=1
            elif pix=="O":
                network[0][inputindex][0]=0
                inputindex-=1 #endvision
    for i in range(0,len(network[1]),1): #layer 1 to 2
        network[1][i][0]=0
    for i in range(len(network[0])):
        for j in range(1,len(network[1]),1):
            network[1][j-1][0]+=network[0][i][j]*network[0][i][0]
    for i in network[1]:
        if network[1][network[1].index(i)][0]>1 or network[1][network[1].index(i)][0]<0:
            network[1][network[1].index(i)][0]=1/(1+2**-network[1][network[1].index(i)][0])
    for i in range(0,len(network[2]),1): #layer 2 to 3
        network[2][i][0]=0
    for i in range(len(network[1])):
        for j in range(1,len(network[2]),1):
            network[2][j-1][0]+=network[1][i][j]*network[1][i][0]
    for i in network[2]:
        if network[2][network[2].index(i)][0]>1 or network[2][network[2].index(i)][0]<0:
                network[2][network[2].index(i)][0]=1/(1+2**-network[2][network[2].index(i)][0])
    for i in range(0,len(network[3][0]),1): #layer 3 to 4 (output neurons)
        network[3][0][i]=0
    for i in range(len(network[2])):
        for j in range(0,layer3len,1):
            network[3][0][j]+=network[2][i][j+1]*network[2][i][0]
    outputindex=network[3][0].index(sorted(network[3][0])[-1]) #selecting largest valued output neuron
    if outputindex==0:
        y+=1
    elif outputindex==1:
        y-=1
    elif outputindex==2:
        x+=1
    else:
        x-=1
    moves+=1
    if map[y][x]=="=":
        newval-=(15-moves)
        moves=15
        if skip:
            print("hit wall")
    elif map[y][x]=="#":
        newval+=35
    elif map[y][x]==".":
        newval+=1
    if moves>=15:
        map=[["=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","="],["=",".",".",".",".","=",".",".","=",".",".","=","=","=","=","=",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","="],["=",".",".",".",".","=",".",".","=",".",".","#",".",".",".","=",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","="],["=",".",".",".","#",".","#",".","=","#",".","=","=",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","="],["=",".",".",".",".","=",".","#","=",".",".","=","=",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","="],["=",".",".",".",".","=",".",".","#",".",".","=","=",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","="],["=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","="]]
        runcount-=1
        moves=0
        x=2
        y=3
        if skip:
            time.sleep(0.5)
        hashdists=[]
        for i in range(len(map)):
            for j in range(len(map[i])):
                if map[i][j]=="#":
                    tv=x-j
                    if tv<0:
                        tv*=-1
                    hashdists.append(tv)
                    tv=y-i
                    if tv<0:
                        tv*=-1
                    hashdists[-1]+=tv
        tv=hashdists[0]
        for i in hashdists:
            if i<tv:
                tv=i
        newval-=tv
        if oldval<newval:
            print("updated primary network")
            runcount=0
            dif=1
            difdampen=0
            oldnetwork=[]
            oldval=newval
            for i in network:
                oldnetwork.append(i)
            dif=0
            rwu=500
        else:
            dif+=1
            if dif==rwu//500:
                dif=0
                rwu+=1
                network=[]
                for i in oldnetwork:
                    network.append(i)
        newval=0
        netlay=random.randint(0,len(network)-2)
        node=random.randint(0,len(network[netlay])-1)
        con=random.randint(1,len(network[netlay][node])-1)
        network[netlay][node][con]+=random.randint(-5,5)/100
        if network[netlay][node][con]>1:
            network[netlay][node][con]=1
        elif network[netlay][node][con]<-1:
            network[netlay][node][con]=-1
